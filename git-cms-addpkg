#!/bin/sh -e
# Mimics addpkg behavior in git.
usage () {
  echo "git cms-addpkg [options] SubSystem/Package"
  echo
  echo "Options:"
  echo -e "-h, --help         \tthis help message"
  echo -e "-d, --debug        \tenable debug output"
  echo -e "-q, --quiet        \tdo not print out progress"
  echo -e "-f, --force        \tforce dangerous operations"
  exit $1
}

VERBOSE=1
FORCE=0

verbose () {
  if [ "X$VERBOSE" = X1 ]; then
    echo "$@"
  fi
}

PKG_NAME=
CMSSW_TAG=
while [ "$#" != 0 ]; do
  case "$1" in
    -h | --help )
      usage 0;;
    -d | --debug )
      shift; set -x ;;
    -q | --quiet )
      shift; set +x; VERBOSE=0 ;;
    -f | --force )
      shift; set +x; FORCE=1 ;;
    -*)
      echo Unknown option $1 ; usage 1 ;;
    *)
      if [ "X$PKG_NAME" = X ]; then
        PKG_NAME=$1
      elif [ "X$CMSSW_TAG" = X ]; then
        CMSSW_TAG=$1
      else
        echo "You can specify only one package at the time." ; exit 1
      fi
      shift 1
    ;;
  esac
done

if [ "X$PKG_NAME" = X ]; then
  echo "You need to specify at least one package." ; exit 1 
fi

if [ "X$CMSSW_TAG" = X ]; then
  verbose No release tags specified, using default $CMSSW_VERSION.
  CMSSW_TAG=$CMSSW_VERSION
fi

CMSSW_BASE_BRANCH=`echo $CMSSW_VERSION | sed -e 's/\(CMSSW_[0-9]\+_[0-9]\+\).*/\1/'`

verbose You are on branch ${CMSSW_BASE_BRANCH}_X
verbose Checking out $PKG_NAME in tag $CMSSW_TAG.

if [ "X$CMSSW_BASE" = X ]; then
  echo CMSSW environment not setup. Do cmsenv in some workarea.
  exit 1
fi

IN_RELEASE=`echo $PWD | grep -q -e "^$CMSSW_BASE" 2> /dev/null && echo 1 || echo 0`
if [ "X$IN_RELEASE" = X0 ]; then
  OLD_CMSSW_BASE=$CMSSW_BASE
  eval `scram run -sh` >/dev/null
  IN_RELEASE=`echo $PWD | grep -q -e "^$CMSSW_BASE" 2> /dev/null && echo 1 || echo 0`
  if [ "X$IN_RELEASE" = X0 ]; then
    echo git cms-addpkg must be run from inside a CMSSW area.
    exit 1
  else
    echo Error: You have currently set up the environment of $OLD_CMSSW_BASE, however you are running inside $CMSSW_BASE.
    echo Please go inside $OLD_CMSSW_BASE, or use cmsenv to switch to $CMSSW_BASE.
    exit 1
  fi
fi

if [ "X$CMSSW_GIT_REFERENCE" = X ]; then
  if [ -e /afs/cern.ch/cms/git-cmssw-mirror/cmssw.git ]; then
    CMSSW_GIT_REFERENCE=/afs/cern.ch/cms/git-cmssw-mirror/cmssw.git
  fi
fi
mkdir -p $CMSSW_BASE/src
cd $CMSSW_BASE/src
if [ ! -d "$CMSSW_BASE/src/.git" ]; then
  # If we have a reference repository, use it by copying locally all the files.
  if [ ! "X$CMSSW_GIT_REFERENCE" = X ]; then
    mkdir -p $CMSSW_BASE/src/.git
    rsync -a $CMSSW_GIT_REFERENCE/ $CMSSW_BASE/src/.git/
    touch $CMSSW_BASE/src/.git/info/sparse-checkout
    git config --local --bool core.sparsecheckout true
    git config --local --bool core.bare false
  else
    git init
  fi
fi
git config remote.cmssw-main.url git@github.com:cms-sw/cmssw.git
git config remote.cmssw-main-ro.url https://github.com/cms-sw/cmssw.git
git config --get-all remote.cmssw-main-ro.fetch | grep "refs/remotes/cmssw-main-ro/pr/*" >/dev/null || git config --add remote.cmssw-main-ro.fetch "+refs/pull/*/head:refs/remotes/cmssw-main-ro/pr/*"
git config core.sparsecheckout true
touch $CMSSW_BASE/src/.git/info/sparse-checkout
cp -f $CMSSW_BASE/src/.git/info/sparse-checkout $CMSSW_BASE/src/.git/info/sparse-checkout-new
echo "$PKG_NAME" | sed -e 's|[/]*$|/|' >> $CMSSW_BASE/src/.git/info/sparse-checkout-new
cat .git/info/sparse-checkout-new | sort -u > $CMSSW_BASE/src/.git/info/sparse-checkout
# If the tag does not exists, we fetch it.
if [ ! -e $CMSSW_BASE/src/.git/refs/tags/$CMSSW_TAG ]; then
  if [ ! "X$CMSSW_MIRROR" = X ]; then
    git remote set-url cmssw-main-ro $CMSSW_MIRROR
    git fetch --tags $CMSSW_MIRROR
    git remote set-url cmssw-main-ro https://github.com/cms-sw/cmssw.git
  fi
  git fetch --tags cmssw-main-ro
fi

if [ ! -e $CMSSW_BASE/src/.git/refs/tags/$CMSSW_TAG ]; then
  echo "Unknown tag $CMSSW_TAG."
  if [ "X$VERBOSE" = X1 ]; then
    echo "Similar known tags in the repository are:"
    git tag | grep $CMSSW_BASE_BRANCH
  fi
  exit 1
fi

if [ ! -e $CMSSW_BASE/src/.git/cms-base-tag ]; then
  git checkout ${CMSSW_BASE_BRANCH}_X
  git reset --hard $CMSSW_TAG
  echo $CMSSW_TAG > $CMSSW_BASE/src/.git/cms-base-tag
fi
if [ ! "X`cat $CMSSW_BASE/src/.git/cms-base-tag`" = X$CMSSW_TAG ]; then
  verbose "This operation will merge in your area a vanilla $CMSSW_TAG."
  if [ ! X$FORCE = X1 ]; then
    verbose "Denying operation. Use -f, --force to force it, conflicts might occur."
    exit 1
  fi
fi

git read-tree -mu $CMSSW_TAG
if [ ! -d $CMSSW_BASE/src/$PKG_NAME ]; then
  echo "Error: package $PKG_NAME does not exist in tag $CMSSW_TAG."
  exit 1
fi
